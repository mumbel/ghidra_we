# sleigh specification file for WE 32100

#TODO
define alignment=1;

define space ram type=ram_space size=4 default;
define space register type=register_space size=4;

define register offset=0x0 size=4 [ r0 r1 r2 r3 r4 r5 r6 r7 r8 fp ap psw sp pcbp isp pc ];

# the OP are all one byte, but broken down for the CC branch/return
define token opbyte (8)
  op = (0, 7)
  op0607 = (6, 7)
  op0205 = (2, 5)
  op0101 = (1, 1)
  op0000 = (0, 0)
;

define token descriptor (8)
  mode = (4, 7)
  op0407 = (4, 7)
  reg = (0, 3)
  op0003 = (0, 3)
  so = (0, 3)
  extype = (0, 3)
;

define token data1 (8)
  op0007 = (0 ,7)
  imm8 = (0, 7) signed
;

define token data2 (16)
  op0015 = (0, 15)
  imm16 = (0, 15) signed
;

define token data4 (32)
  op0031 = (0, 31)
  imm32 = (0, 31) signed
;

attach variables [ reg ] [ r0 r1 r2 r3 r4 r5 r6 r7 r8 fp ap psw sp pcbp isp pc ];

# psw
@define Ccc "psw[18,1]"
@define Vcc "psw[19,1]"
@define Zcc "psw[20,1]"
@define Ncc "psw[21,1]"

macro cond_case_1(__dst) {
      local __msb:4 = 0x80000000;
      $(Ncc) = (__msb & __dst) != 0;
      $(Zcc) = __dst == 0;
      $(Ccc) = 0;
      $(Vcc) = 0;
}

macro cond_case_2(__result) {
      $(Ncc) = __result s< 0;
      $(Zcc) = __result == 0;
      $(Ccc) = 0; #TODO 1 on carry or borrow
      $(Vcc) = 0; #TODO 1 on integer overflow
}

macro cond_case_3(__dst) {
      $(Ncc) = __dst s< 0;
      $(Zcc) = __dst == 0;
      $(Ccc) = 0;
      $(Vcc) = 0; #TODO 1 on integer overflow
}

macro cond_case_4(__dst) {
      $(Ncc) = __dst s< 0;
      $(Zcc) = __dst == 0;
      $(Ccc) = 0;
      $(Vcc) = 0; #TODO 1 on integer overflow
}

macro cond_case_5(__dst) {
      $(Ncc) = __dst s< 0;
      $(Zcc) = __dst == 0;
      $(Ccc) = 0;
      $(Vcc) = 0;
}

macro cond_case_6(__src) {
      $(Ncc) = __src s< 0;
      $(Zcc) = __src == 0;
      $(Ccc) = 0;
      $(Vcc) = 0;
}

macro cond_case_7(__result) {
      local __msb:4 = 0x80000000;
      $(Ncc) = (__msb & __result) != 0;
      $(Zcc) = __result == 0;
      $(Ccc) = 0;
      $(Vcc) = 0;
}

macro cond_case_8(__new_psw) {
      $(Ncc) = __new_psw[21,1];
      $(Zcc) = __new_psw[20,1];
      $(Ccc) = __new_psw[18,1];
      $(Vcc) = __new_psw[19,1];
}

macro cond_case_9(__restored_psw) {
      $(Ncc) = __restored_psw[21,1];
      $(Zcc) = __restored_psw[20,1];
      $(Ccc) = __restored_psw[18,1];
      $(Vcc) = __restored_psw[19,1];
}

macro cond_case_10(__status) {
      $(Ncc) = __status[21,1];
      $(Zcc) = __status[20,1];
      $(Ccc) = __status[18,1];
      $(Vcc) = __status[19,1];
}

# program control
disp8:  addr  is imm8  [ addr = inst_start + imm8; ]
{
	export *:4 addr;
}

disp16: addr  is imm16 [ addr = inst_start + imm16; ]
{
	export *:4 addr;
}


# absolute
srcmode: "$"^op0031      is mode=7  & op0003=15 ; op0031
{
	local tmp:4 = op0031;
	export *tmp;
}
dstmode: "$"^op0031      is mode=7  & op0003=15 ; op0031
{
	local tmp:4 = op0031;
	export *tmp;
}
seamode: "$"^op0031      is mode=7  & op0003=15 ; op0031
{
	local tmp:4 = op0031;
	export tmp;
}
deamode: "$"^op0031      is mode=7  & op0003=15 ; op0031
{
	local tmp:4 = op0031;
	export tmp;
}

srcmode: "*$"^op0031     is mode=14 & op0003=15 ; op0031
{
	local tmp:4 = op0031;
	local tmp2:4 = *[ram]:4 tmp;
	export *tmp2;
}
dstmode: "*$"^op0031     is mode=14 & op0003=15 ; op0031
{
	local tmp:4 = op0031;
	local tmp2:4 = *[ram]:4 tmp;
	export *tmp2;
}
seamode: "*$"^op0031     is mode=14 & op0003=15 ; op0031
{
	local tmp:4 = op0031;
	local tmp2:4 = *[ram]:4 tmp;
	export tmp2;
}
deamode: "*$"^op0031     is mode=14 & op0003=15 ; op0031
{
	local tmp:4 = op0031;
	local tmp2:4 = *[ram]:4 tmp;
	export tmp2;
}

# displacement
srcmode: imm8(%reg)     is mode=12 & reg & op0003!=11 ; imm8
{
	local tmp:4 = imm8 + reg;
	export *[ram]:4 tmp;
}
dstmode: imm8(%reg)     is mode=12 & reg & op0003!=11 ; imm8
{
	local tmp:4 = imm8 + reg;
	export *[ram]:4 tmp;
}
seamode: imm8(%reg)     is mode=12 & reg & op0003!=11 ; imm8
{
	local tmp:4 = imm8 + reg;
	export tmp;
}
deamode: imm8(%reg)     is mode=12 & reg & op0003!=11 ; imm8
{
	local tmp:4 = imm8 + reg;
	export tmp;
}


srcmode: "*"^imm8(%reg) is mode=13 & reg & op0003!=11 ; imm8
{
	local tmp:4 = imm8 + reg;
	local tmp2:4 = *[ram] tmp;
	export *[ram]:4 tmp2;
}
dstmode: "*"^imm8(%reg) is mode=13 & reg & op0003!=11 ; imm8
{
	local tmp:4 = imm8 + reg;
	local tmp2:4 = *[ram] tmp;
	export *[ram]:4 tmp2;
}
seamode: "*"^imm8(%reg) is mode=13 & reg & op0003!=11 ; imm8
{
	local tmp:4 = imm8 + reg;
	local tmp2:4 = *[ram] tmp;
	export tmp2;
}
deamode: "*"^imm8(%reg) is mode=13 & reg & op0003!=11 ; imm8
{
	local tmp:4 = imm8 + reg;
	local tmp2:4 = *[ram] tmp;
	export tmp2;
}

srcmode: imm16(%reg)     is mode=10 & reg & op0003!=11 ; imm16
{
	local tmp:4 = imm16 + reg;
	export *[ram]:4 tmp;
}
dstmode: imm16(%reg)     is mode=10 & reg & op0003!=11 ; imm16
{
	local tmp:4 = imm16 + reg;
	export *[ram]:4 tmp;
}
seamode: imm16(%reg)     is mode=10 & reg & op0003!=11 ; imm16
{
	local tmp:4 = imm16 + reg;
	export tmp;
}
deamode: imm16(%reg)     is mode=10 & reg & op0003!=11 ; imm16
{
	local tmp:4 = imm16 + reg;
	export tmp;
}

srcmode: "*"^imm16(%reg) is mode=11 & reg & op0003!=11 ; imm16
{
	local tmp:4 = imm16 + reg;
	local tmp2:4 = *[ram] tmp;
	export *[ram]:4 tmp2;
}
dstmode: "*"^imm16(%reg) is mode=11 & reg & op0003!=11 ; imm16
{
	local tmp:4 = imm16 + reg;
	local tmp2:4 = *[ram] tmp;
	export *[ram]:4 tmp2;
}
seamode: "*"^imm16(%reg) is mode=11 & reg & op0003!=11 ; imm16
{
	local tmp:4 = imm16 + reg;
	local tmp2:4 = *[ram] tmp;
	export tmp2;
}
deamode: "*"^imm16(%reg) is mode=11 & reg & op0003!=11 ; imm16
{
	local tmp:4 = imm16 + reg;
	local tmp2:4 = *[ram] tmp;
	export tmp2;
}

srcmode: imm32(%reg)     is mode=8  & reg & op0003!=11 ; imm32
{
	local tmp:4 = imm32 + reg;
	export *[ram]:4 tmp;
}
dstmode: imm32(%reg)     is mode=8  & reg & op0003!=11 ; imm32
{
	local tmp:4 = imm32 + reg;
	export *[ram]:4 tmp;
}
seamode: imm32(%reg)     is mode=8  & reg & op0003!=11 ; imm32
{
	local tmp:4 = imm32 + reg;
	export tmp;
}
deamode: imm32(%reg)     is mode=8  & reg & op0003!=11 ; imm32
{
	local tmp:4 = imm32 + reg;
	export tmp;
}

srcmode: "*"^imm32(%reg) is mode=9  & reg & op0003!=11 ; imm32
{
	local tmp:4 = imm32 + reg;
	local tmp2:4 = *[ram] tmp;
	export *[ram]:4 tmp2;
}
dstmode: "*"^imm32(%reg) is mode=9  & reg & op0003!=11 ; imm32
{
	local tmp:4 = imm32 + reg;
	local tmp2:4 = *[ram] tmp;
	export *[ram]:4 tmp2;
}
seamode: "*"^imm32(%reg) is mode=9  & reg & op0003!=11 ; imm32
{
	local tmp:4 = imm32 + reg;
	local tmp2:4 = *[ram] tmp;
	export tmp2;
}
deamode: "*"^imm32(%reg) is mode=9  & reg & op0003!=11 ; imm32
{
	local tmp:4 = imm32 + reg;
	local tmp2:4 = *[ram] tmp;
	export tmp2;
}

#TODO  so is broken here
srcmode: so(%ap)          is mode=7  & so & ap & op0003<15
{
	local tmp:4 = so;
	tmp = tmp + ap;
	export *[ram]:4 tmp;
}
dstmode: so(%ap)          is mode=7  & so & ap & op0003<15
{
	local tmp:4 = so;
	tmp = tmp + ap;
	export *[ram]:4 tmp;
}
seamode: so(%ap)          is mode=7  & so & ap & op0003<15
{
	local tmp:4 = so;
	tmp = tmp + ap;
	export tmp;
}
deamode: so(%ap)          is mode=7  & so & ap & op0003<15
{
	local tmp:4 = so;
	tmp = tmp + ap;
	export tmp;
}

#TODO  so is broken here
srcmode: so(%fp)          is mode=6  & so & fp & op0003<15
{
	local tmp:4 = so;
	tmp = tmp + fp;
	export *[ram]:4 tmp;
}
dstmode: so(%fp)          is mode=6  & so & fp & op0003<15
{
	local tmp:4 = so;
	tmp = tmp + fp;
	export *[ram]:4 tmp;
}
seamode: so(%fp)          is mode=6  & so & fp & op0003<15
{
	local tmp:4 = so;
	tmp = tmp + fp;
	export tmp;
}
deamode: so(%fp)          is mode=6  & so & fp & op0003<15
{
	local tmp:4 = so;
	tmp = tmp + fp;
	export tmp;
}

# immediate
srcmode: "&"^imm8         is mode=6  & op0003=15 ; imm8
{
	local tmp:4 = imm8;
	export *[const] tmp;
}

srcmode: "&"^imm16        is mode=5  & op0003=15 ; imm16
{
	local tmp:4 = imm16;
	export *[const] tmp;
}

srcmode: "&"^imm32        is mode=4  & op0003=15 ; imm32
{
	local tmp:4 = imm32;
	export *[const] tmp;
}

srcmode: "&"^lit          is (mode=0|mode=1|mode=2|mode=3) & op0407 & so [ lit = (op0407 << 4) | so; ]
{
	local tmp:4 = lit;
	export *[const] tmp;
}

srcmode: "&"^lit          is mode=15 & so [ lit = (-1 << 4) | so; ]
{
	local tmp:4 = lit;
	export *[const] tmp;
}

# register
srcmode: %reg             is mode=4  & reg & op0003!=15
{
	#TODO  looks broken in pcode
	export reg;
}
dstmode: %reg             is mode=4  & reg & op0003!=15
{
	#TODO  looks broken in pcode
	export reg;
}

srcmode: (%reg)           is mode=5  & reg & (op0003!=15 & op0003!=11)
{
	local tmp:4 = *[ram]:4 reg;
	export tmp;
}
dstmode: (%reg)           is mode=5  & reg & (op0003!=15 & op0003!=11)
{
	local tmp:4 = *[ram]:4 reg;
	export tmp;
}
#TODO  probably broken
seamode: (%reg)           is mode=5  & reg & (op0003!=15 & op0003!=11)
{
	export reg;
}
#TODO  probably broken
deamode: (%reg)           is mode=5  & reg & (op0003!=15 & op0003!=11)
{
	export reg;
}


#TODO  super broken
# special
exsrc: "{sbyte}"^srcmode  is extype=7 ; srcmode { local tmp:4 = sext(srcmode:1); export tmp; }
exsrc: "{shalf}"^srcmode  is extype=6 ; srcmode { local tmp:4 = sext(srcmode:2); export tmp; }
exsrc: "{sword}"^srcmode  is extype=4 ; srcmode { local tmp:4 = srcmode:4; export tmp; }
exsrc: "{ubyte}"^srcmode  is extype=3 ; srcmode { local tmp:4 = zext(srcmode:1); export tmp; }
exsrc: "{uhalf}"^srcmode  is extype=2 ; srcmode { local tmp:4 = zext(srcmode:2); export tmp; }
exsrc: "{uword}"^srcmode  is extype=0 ; srcmode { local tmp:4 = srcmode:4; export tmp; }

srcmode: exsrc is (mode=14 & op0003!=15) ... & exsrc { local tmp:4 = exsrc; export tmp; }

exdst: "{sbyte}"^dstmode  is extype=7 ; dstmode { local tmp:4 = sext(dstmode:1); export tmp; }
exdst: "{shalf}"^dstmode  is extype=6 ; dstmode { local tmp:4 = sext(dstmode:2); export tmp; }
exdst: "{sword}"^dstmode  is extype=4 ; dstmode { local tmp:4 = dstmode:4; export tmp; }
exdst: "{ubyte}"^dstmode  is extype=3 ; dstmode { local tmp:4 = zext(dstmode:1); export tmp; }
exdst: "{uhalf}"^dstmode  is extype=2 ; dstmode { local tmp:4 = zext(dstmode:2); export tmp; }
exdst: "{uword}"^dstmode  is extype=0 ; dstmode { local tmp:4 = dstmode:4; export tmp; }

dstmode: exdst is (mode=14 & op0003!=15) ... & exdst { local tmp:4 = exdst; export tmp; }


src:    srcmode is srcmode { export srcmode; }
src1:   srcmode is srcmode { export srcmode; }
src2:   srcmode is srcmode { export srcmode; }
width:  srcmode is srcmode { export srcmode; }
offset: srcmode is srcmode { export srcmode; }
count:  srcmode is srcmode { export srcmode; }

dst:    dstmode is dstmode { export dstmode; }


# branch conditions
CC: "GE"     is op0205=0  { local tmp:1 = (($(Ncc) == 0) | ($(Ccc) == 1)); export tmp; }    # greater than or equal
CC: "G"      is op0205=1  { local tmp:1 = (($(Ncc) == 0) & ($(Zcc) == 0)); export tmp; } # greater than (signed)
CC: "L"      is op0205=2  { local tmp:1 = (($(Ncc) == 1) & ($(Zcc) == 0)); export tmp; } # less than
CC: "LE"     is op0205=3  { local tmp:1 = (($(Ncc) == 1) | ($(Zcc) == 1)); export tmp; } # less than or equal (signed)
#CC: "CC"     is op0205=4  { local tmp:1 = ($(Ccc) == 0); export tmp; }                   # carry clear
CC: "GEU"    is op0205=4  { local tmp:1 = ($(Ccc) == 0); export tmp; }                   # greater than or equal (unsigned)
CC: "GU"     is op0205=5  { local tmp:1 = (($(Ccc) == 0) & ($(Zcc) == 0)); export tmp; } # greater than (unsigned)
#CC: "CS"     is op0205=6  { local tmp:1 = ($(Ccc) == 1); export tmp; }                   # carry set
CC: "LU"     is op0205=6  { local tmp:1 = ($(Ccc) == 1); export tmp; }                   # less than (unsigned)
CC: "LEU"    is op0205=7  { local tmp:1 = (($(Ccc) == 1) | ($(Zcc) == 1)); export tmp; } # less than or equal (unsigned)
CC: "VC"     is op0205=8  { local tmp:1 = ($(Vcc) == 0); export tmp; }                   # overflow clear
CC: "NE"     is op0205=9  { local tmp:1 = ($(Zcc) == 0); export tmp; }                   # not equal
CC: "VS"     is op0205=10 { local tmp:1 = ($(Vcc) == 1); export tmp; }                   # overflow set
CC: "E"      is op0205=11 { local tmp:1 = ($(Zcc) == 1); export tmp; }                   # equal
CC: "NE"     is op0205=13 { local tmp:1 = ($(Zcc) == 0); export tmp; }                   # not equal
CC: "R"      is op0205=14 { local tmp:1 = 1; export tmp; }                                # branch
CC: "E"      is op0205=15 { local tmp:1 = ($(Zcc) == 1); export tmp; }                   # equal

# return conditions
CC_: "GEQ"   is op0205=0  { local tmp:1 = (($(Ncc) == 0) | ($(Ccc) == 1)); export tmp; }    # greater than or equal (signed)
CC_: "GTR"   is op0205=1  { local tmp:1 = (($(Ncc) == 0) & ($(Zcc) == 0)); export tmp; } # greater than (signed)
CC_: "LSS"   is op0205=2  { local tmp:1 = (($(Ncc) == 1) & ($(Zcc) == 0)); export tmp; } # less than
CC_: "LEQ"   is op0205=3  { local tmp:1 = (($(Ncc) == 1) | ($(Zcc) == 1)); export tmp; } # less than or equal (signed)
#CC_: "CC"    is op0205=4  { local tmp:1 = ($(Ccc) == 0); export tmp; }                   # carry clear
CC_: "GEQU"  is op0205=4  { local tmp:1 = ($(Ccc) == 0); export tmp; }                   # greater than or equal (unsigned)
CC_: "GTRU"  is op0205=5  { local tmp:1 = (($(Ccc) == 0) & ($(Zcc) == 0)); export tmp; } # greater than (unsigned)
#CC_: "CS"    is op0205=6  { local tmp:1 = ($(Ccc) == 1); export tmp; }                   # carry set
CC_: "LSSU"  is op0205=6  { local tmp:1 = ($(Ccc) == 1); export tmp; }                   # less than (unsigned)
CC_: "LEQU"  is op0205=7  { local tmp:1 = (($(Ccc) == 1) | ($(Zcc) == 1)); export tmp; } # less than or equal (unsigned)
CC_: "VC"    is op0205=8  { local tmp:1 = ($(Vcc) == 0); export tmp; }                   # overflow clear
CC_: "NEQU"  is op0205=9  { local tmp:1 = ($(Zcc) == 0); export tmp; }                   # not equal (unsigned)
CC_: "VS"    is op0205=10 { local tmp:1 = ($(Vcc) == 1); export tmp; }                   # overflow set
CC_: "EQLU"  is op0205=11 { local tmp:1 = ($(Zcc) == 1); export tmp; }                   # equal (unsigned)
CC_: "NEQ"   is op0205=13 { local tmp:1 = ($(Zcc) == 0); export tmp; }                   # not equal (signed)
CC_: "SB"    is op0205=14 { local tmp:1 = 1; export tmp; }                                # return (unconditional)
CC_: "EQL"   is op0205=15 { local tmp:1 = ($(Zcc) == 1); export tmp; }                   # equal (signed)



:ADDB2 src,dst        is op=0x9f ; src ; dst
{
	local tmp:4 = zext(src:1 + dst:1);
	dst = tmp;
	cond_case_2(dst);
}

:ADDB3 src1,src2,dst  is op=0xdf ; src1 ; src2 ; dst
{
	local tmp:4 = zext(src1:1 + src2:1);
	dst = tmp;
	cond_case_2(dst);
}

:ADDH2 src,dst        is op=0x9e ; src ; dst
{
	local tmp:4 = zext(src:2 + dst:2);
	dst = tmp;
	cond_case_2(dst);
}

:ADDH3 src1,src2,dst  is op=0xde ; src1 ; src2 ; dst
{
	local tmp:4 = zext(src1:1 + src2:1);
	dst = tmp;
	cond_case_2(dst);
}

:ADDW2 src,dst        is op=0x9c ; src ; dst
{
	local tmp:4 = src + dst;
	dst = tmp;
	cond_case_2(dst);
}

:ADDW3 src1,src2,dst  is op=0xdc ; src1 ; src2 ; dst
{
	local tmp:4 = src1 + src2;
	dst = tmp;
	cond_case_2(dst);
}

:ALSW3 count,src,dst  is op=0xc0 ; count ; src ; dst
{
	local tmp:4 = src << (count & 0x1f);
	dst = tmp;
	cond_case_5(dst);
}

:ANDB2 src,dst        is op=0xbb ; src ; dst
{
	local tmp:4 = zext(src:1);
	tmp = tmp & zext(dst:1);
	dst = tmp;
	cond_case_1(tmp);
}

:ANDB3 src1,src2,dst  is op=0xfb ; src1 ; src2 ; dst
{
	local tmp:4 = zext(src1:1 & src2:1);
	dst = tmp;
	cond_case_1(dst);
}

:ANDH2 src,dst        is op=0xba ; src ; dst
{
	local tmp:4 = zext(src:2 & dst:2);
	dst = tmp;
	cond_case_1(dst);
}

:ANDH3 src1,src2,dst  is op=0xfa ; src1 ; src2 ; dst
{
	local tmp:4 = zext(src1:2 & src2:2);
	dst = tmp;
	cond_case_1(dst);
}

:ANDW2 src,dst        is op=0xb8 ; src ; dst
{
	local tmp:4 = src & dst;
	dst = tmp;
	cond_case_1(dst);
}

:ANDW3 src1,src2,dst  is op=0xf8 ; src1 ; src2 ; dst
{
	local tmp:4 = src1 & src2;
	dst = tmp;
	cond_case_1(dst);
}

:ARSB3 count,src,dst  is op=0xc7 ; count ; src ; dst
{
	local tmp:4 = sext(src:1 s>> (count & 0x1f));
	dst = tmp;
	cond_case_3(dst);
}

:ARSH3 count,src,dst  is op=0xc6 ; count ; src ; dst
{
	local tmp:4 = sext(src:2 s>> (count & 0x1f));
	dst = tmp;
	cond_case_3(dst);
}

:ARSW3 count,src,dst  is op=0xc4 ; count ; src ; dst
{
	local tmp:4 = src s>> (count & 0x1f);
	dst = tmp;
	cond_case_3(dst);
}


# :BCCB  0x53
# :BCSB  0x5b
# :BEB   0x6f
# :BEB   0x7f
# :BGB   0x47
# :BGEB  0x43
# :BGEUB 0x53
# :BGUB  0x57
# :BLB   0x4b
# :BLEB  0x4f
# :BLEUB 0x5f
# :BLUB  0x5b
# :BNEB  0x67
# :BNEB  0x77
# :BRB   0x7b
# :BVCB  0x63
# :BVSB  0x6b
:B^CC^"B" disp8 is op0607=1 & op0101=1 & op0000=1 & CC ; disp8
{
	if (CC != 0) goto disp8;
}

# :BCCH  0x52
# :BCSH  0x5a
# :BEH   0x6e
# :BEH   0x7e
# :BGEH  0x42
# :BGEUH 0x52
# :BGH   0x46
# :BGUH  0x56
# :BLEH  0x4e
# :BLEUH 0x5e
# :BLH   0x4a
# :BLUH  0x5a
# :BNEH  0x66
# :BNEH  0x76
# :BRH   0x7a
# :BVCH  0x62
# :BVSH  0x6a
:B^CC^"H" disp16 is op0607=1 & op0101=1 & op0000=0 & CC ; disp16
{
	if (CC != 0) goto disp16;
}

:BITB src1,src2   is op=0x3b ; src1 ; src2
{
	local tmp:4 = zext(src1:1 & src2:1);
	cond_case_1(tmp);
}

:BITH src1,src2   is op=0x3a ; src1 ; src2
{
	local tmp:4 = zext(src1:2 & src2:2);
	cond_case_1(tmp);
}

:BITW src1,src2   is op=0x38 ; src1 ; src2
{
	local tmp:4 = src1 & src2;
	cond_case_1(tmp);
}

define pcodeop breakpoint;
:BPT     is op=0x2e
{
	breakpoint();
}

:BSBB disp8   is op=0x37 ; disp8
{
	local tmp:4 = inst_next;
	*[ram]:4 sp = tmp;
	sp = sp + 4;
	call disp8;
}

:BSBH disp16   is op=0x36 ; disp16
{
	local tmp:4 = inst_next;
	*[ram]:4 sp = tmp;
	sp = sp + 4;
	call disp16;
}

:CALL seamode,deamode    is op=0x2c ; seamode ; deamode
{
	local tempa:4 = seamode;
	local tempb:4 = deamode;
	*[ram]:4 sp = inst_next;
	sp = sp + 4;
	*[ram]:4 sp = ap;
	sp = sp + 4;
	ap = tempa;
	call [tempb];
}

define pcodeop process_switch;
:CALLPS   is op=0x30 ; op0007=0xAC
{
	process_switch();
}

define pcodeop cflush;
:CFLUSH  is op=0x27
{
	cflush();
}

:CLRB dst   is op=0x83 ; dst
{
	dst = 0;
	cond_case_2(dst);
}

:CLRH dst   is op=0x82 ; dst
{
	dst = 0;
	cond_case_2(dst);
}

:CLRW dst   is op=0x80 ; dst
{
	dst = 0;
	cond_case_2(dst);
}

:CMPB src1,src2   is op=0x3f ; src1 ; src2
{
	local tmp:4 = zext(src2:1 - src1:1);
	cond_case_2(tmp);
}

:CMPH src1,src2   is op=0x3e ; src1 ; src2
{
	local tmp:4 = zext(src2:2 - src1:2);
	cond_case_2(tmp);
}

:CMPW src1,src2   is op=0x3c ; src1 ; src2
{
	local tmp:4 = src2 - src1;
	cond_case_2(tmp);
}

:DECB dst   is op=0x97 ; dst
{
	local tmp:4 = zext(dst:1 - 1);
	dst = tmp;
	cond_case_2(dst);
}

:DECH dst   is op=0x96 ; dst
{
	local tmp:4 = zext(dst:2 - 1);
	dst = tmp;
	cond_case_2(dst);
}

:DECW dst   is op=0x94 ; dst
{
	local tmp:4 = dst - 1;
	dst = tmp;
	cond_case_2(dst);
}

define pcodeop disable_virtual_pin;
:DISVJMP  is op=0x30 ; op0007=0x13
{
	disable_virtual_pin();
	goto [r0];
}

:DIVB2 src,dst  is op=0xaf ; src ; dst
{
	local tmp:4 = zext(dst:1 / src:1);
	dst = tmp;
	cond_case_3(dst);
}

:DIVB3 src1,src2,dst  is op=0xef ; src1 ; src2 ; dst
{
	local tmp:4 = zext(src2:1 / src1:1);
	dst = tmp;
	cond_case_4(dst);
}

:DIVH2 src,dst  is op=0xae ; src ; dst
{
	local tmp:4 = zext(dst:2 / src:2);
	dst = tmp;
	cond_case_3(dst);
}

:DIVH3 src1,src2,dst  is op=0xee ; src1 ; src2 ; dst
{
	local tmp:4 = zext(src2:2 / src1:2);
	dst = tmp;
	cond_case_4(dst);
}

:DIVW2 src,dst  is op=0xac ; src ; dst
{
	local tmp:4 = dst / src;
	dst = tmp;
	cond_case_3(dst);
}

:DIVW3 src1,src2,dst  is op=0xec ; src1 ; src2 ; dst
{
	local tmp:4 = src2 / src1;
	dst = tmp;
	cond_case_4(dst);
}

define pcodeop enable_virtual_pin;
:ENVBJMP  is op=0x30 ; op0007=0x0D
{
	enable_virtual_pin();
	goto [r0];
}

:EXTFB width,offset,src,dst  is op=0xcf ; width ; offset ; src ; dst
{
	local tmp:4 = zext(((1 << width) - 1) & (src:1 >> offset));
	dst = tmp;
	cond_case_1(dst);
}

:EXTFH width,offset,src,dst  is op=0xce ; width ; offset ; src ; dst
{
	local tmp:4 = zext(((1 << width) - 1) & (src:2 >> offset));
	dst = tmp;
	cond_case_1(dst);
}

:EXTFW width,offset,src,dst  is op=0xcc ; width ; offset ; src ; dst
{
	local tmp:4 = ((1 << width) - 1) & (src >> offset);
	dst = tmp;
	cond_case_1(dst);
}

define pcodeop extop;
:EXTOP   is op=0x14
{
	extop();
}

define pcodeop gate;
:GATE  is op=0x30 ; op0007=0x61
{
	#TODO  this is system call, can do "syscall" like stuff for it
	gate();
}

:INCB dst   is op=0x93 ; dst
{
	local tmp:4 = zext(dst:1 + 1);
	dst = tmp;
	cond_case_2(dst);
}

:INCH dst   is op=0x92 ; dst
{
	local tmp:4 = zext(dst:2 + 1);
	dst = tmp;
	cond_case_2(dst);
}

:INCW dst   is op=0x90 ; dst
{
	local tmp:4 = dst + 1;
	dst = tmp;
	cond_case_2(dst);
}

:INSFB width,offset,src,dst  is op=0xcb ; width ; offset ; src ; dst
{
	local tmp:4 = zext((~(((1 << width) - 1) << offset)) & dst:1);
	local tmp2:4 = zext((((1 << width) - 1) << offset) & src:1);
	local tmp3:4 = tmp | tmp2;
	dst = tmp3;
}

:INSFH width,offset,src,dst  is op=0xca ; width ; offset ; src ; dst
{
	local tmp:4 = zext((~(((1 << width) - 1) << offset)) & dst:2);
	local tmp2:4 = zext((((1 << width) - 1) << offset) & src:2);
	local tmp3:4 = tmp | tmp2;
	dst = tmp3;
}

:INSFW width,offset,src,dst  is op=0xc8 ; width ; offset ; src ; dst
{
	local tmp:4 = (~(((1 << width) - 1) << offset)) & dst;
	local tmp2:4 = (((1 << width) - 1) << offset) & src;
	local tmp3:4 = tmp | tmp2;
	dst = tmp3;
}

:INTACK dst  is op=0x30 ; op0007=0x2F ; dst
{
	local tmp:4 = dst;
	r0 = tmp << 2;
}

:JMP deamode    is op=0x24 ; deamode
{
	goto [deamode];
}

:JSB deamode    is op=0x34 ; deamode
{
	local tmp:4 = inst_next;
	*[ram]:4 sp = tmp;
	sp = sp + 4;
	#TODO  call or goto?
	call [deamode];
}

:LLSB3 count,src,dst  is op=0xd3 ; count ; src; dst
{
	local tmp:4 = zext(src:1 << (count & 0x1f));
	dst = tmp;
	cond_case_1(dst);
}

:LLSH3 count,src,dst  is op=0xd2 ; count ; src; dst
{
	local tmp:4 = zext(src:2 << (count & 0x1f));
	dst = tmp;
	cond_case_1(dst);
}

:LLSW3 count,src,dst  is op=0xd0 ; count ; src; dst
{
	local tmp:4 = src << (count & 0x1f);
	dst = tmp;
	cond_case_1(dst);
}

:LRSW3 count,src,dst  is op=0xd4 ; count ; src; dst
{
	local tmp:4 = src >> (count & 0x1f);
	dst = tmp;
	cond_case_1(dst);
}

:MCOMB src,dst  is op=0x8b ; src ; dst
{
	local tmp:4 = zext(~src:1);
	dst = tmp;
	cond_case_1(dst);
}

:MCOMH src,dst  is op=0x8a ; src ; dst
{
	local tmp:4 = zext(~src:2);
	dst = tmp;
	cond_case_1(dst);
}

:MCOMW src,dst  is op=0x88 ; src ; dst
{
	local tmp:4 = ~src;
	dst = tmp;
	cond_case_1(dst);
}

:MNEGB src,dst  is op=0x8f ; src ; dst
{
	local tmp:4 = zext(-src:1);
	dst = tmp;
	cond_case_2(dst);
}

:MNEGH src,dst  is op=0x8e ; src ; dst
{
	local tmp:4 = zext(-src:2);
	dst = tmp;
	cond_case_2(dst);
}

:MNEGW src,dst  is op=0x8c ; src ; dst
{
	local tmp:4 = -src;
	dst = tmp;
	cond_case_2(dst);
}

:MODB2 src,dst  is op=0xa7 ; src ; dst
{
	local tmp:4 = zext(dst:1 % src:1);
	dst = tmp;
}

:MODB3 src1,src2,dst  is op=0xe7 ; src1 ; src2 ; dst
{
	local tmp:4 = zext(src2:1 % src1:1);
	dst = tmp;
}

:MODH2 src,dst  is op=0xa6 ; src ; dst
{
	local tmp:4 = zext(dst:2 % src:2);
	dst = tmp;
}

:MODH3 src1,src2,dst  is op=0xe6 ; src1 ; src2 ; dst
{
	local tmp:4 = zext(src2:2 % src1:2);
	dst = tmp;
}

:MODW2 src,dst  is op=0xa4 ; src ; dst
{
	local tmp:4 = dst % src;
	dst = tmp;
}

:MODW3 src1,src2,dst  is op=0xe4 ; src1 ; src2 ; dst
{
	local tmp:4 = src2 % src1;
	dst = tmp;
}

:MOVAW seamode,dst  is op=0x04; seamode ; dst
{
	local tmp:4 = seamode;
	dst = tmp;
	cond_case_1(dst);
}

:MOVB src,dst   is op=0x87 ; src ; dst
{
	local tmp:4 = zext(src:1);
	dst = tmp;
	cond_case_1(dst);
}

:MOVBLW  is op=0x30 ; op0007=0x19
{
    <start>
	if (r2 == 0) goto inst_next;
	*[ram]:4 r1 = *[ram]:4 r0;
	r1 = r1 + 1;
	r0 = r0 + 1;
	r2 = r2 - 1;
	goto <start>;
}

:MOVH src,dst   is op=0x86 ; src ; dst
{
	local tmp:4 = zext(src:2);
	dst = tmp;
	cond_case_1(dst);
}

define pcodeop physical_address;
:MOVTRW src,dst  is op=0x0C ; src ; dst
{
	local tmp:4 = physical_address(src);
	dst = tmp;
}

:MOVW src,dst   is op=0x84 ; src ; dst
{
	local tmp:4 = src;
	dst = tmp;
}

:MULB2 src,dst  is op=0xab ; src ; dst
{
	local tmp:4 = zext(dst:1 * src:1);
	dst = tmp;
	cond_case_3(dst);
}

:MULB3 src1,src2,dst  is op=0xeb ; src1 ; src2 ; dst
{
	local tmp:4 = zext(src2:1 * src1:1);
	dst = tmp;
	cond_case_4(dst);
}

:MULH2 src,dst  is op=0xaa ; src ; dst
{
	local tmp:4 = zext(dst:2 * src:2);
	dst = tmp;
	cond_case_3(dst);
}

:MULH3 src1,src2,dst  is op=0xea ; src1 ; src2 ; dst
{
	local tmp:4 = zext(src2:2 * src1:2);
	dst = tmp;
	cond_case_4(dst);
}

:MULW2 src,dst  is op=0xa8 ; src ; dst
{
	local tmp:4 = dst * src;
	dst = tmp;
	cond_case_3(dst);
}

:MULW3 src1,src2,dst  is op=0xe8 ; src1 ; src2 ; dst
{
	local tmp:4 = src2 * src1;
	dst = tmp;
	cond_case_4(dst);
}

define pcodeop verno;
:MVERNO  is op=0x30 ; op0007=0x09
{
	r0 = verno();
}

:NOP     is op=0x70
{
	local __nop:1 = 0;
	__nop = __nop;
}

:NOP2    is op=0x73 ; op0007
{
	local __nop:1 = 0;
	__nop = __nop;
}

:NOP3    is op=0x72 ; op0015
{
	local __nop:1 = 0;
	__nop = __nop;
}

:ORB2 src,dst   is op=0xb3 ; src ; dst
{
	local tmp:4 = zext(dst:1 | src:1);
	dst = tmp;
	cond_case_1(dst);
}

:ORB3 src1,src2,dst   is op=0xf3 ; src1 ; src2 ; dst
{
	local tmp:4 = zext(src1:1 | src2:1);
	dst = tmp;
	cond_case_1(dst);
}

:ORH2 src,dst   is op=0xb2 ; src ; dst
{
	local tmp:4 = zext(dst:2 | src:2);
	dst = tmp;
	cond_case_1(dst);
}

:ORH3 src1,src2,dst   is op=0xf2 ; src1 ; src2 ; dst
{
	local tmp:4 = zext(src1:2 | src2:2);
	dst = tmp;
	cond_case_1(dst);
}

:ORW2 src,dst   is op=0xb0 ; src ; dst
{
	local tmp:4 = dst | src;
	dst = tmp;
	cond_case_1(dst);
}

:ORW3 src1,src2,dst   is op=0xf0 ; src1 ; src2 ; dst
{
	local tmp:4 = src1 | src2;
	dst = tmp;
	cond_case_1(dst);
}

:POPW dst   is op=0x20 ; dst
{
	sp = sp - 4;
	dst = *[ram]:4 sp;
	cond_case_1(dst);
}

:PUSHAW seamode is op=0xe0 ; seamode
{
	*[ram]:4 sp = seamode;
	sp = sp + 4;
	cond_case_1(seamode);
}

:PUSHW src  is op=0xa0 ; src
{
	*[ram]:4 sp = src;
	sp = sp + 4;
	cond_case_1(src);
}

# :RCC   0x50
# :RCS   0x58
# :REQLU 0x6c
# :REQL  0x7c
# :RGEQ  0x40
# :RGEQU 0x50
# :RGTR  0x44
# :RGTRU 0x54
# :RLEQ  0x4c
# :RLEQU 0x5c
# :RLSS  0x48
# :RLSSU 0x58
# :RNEQU 0x64
# :RNEQ  0x74
# :RSB   0x78
# :RVC   0x60
# :RVS   0x68
:R^CC_ is op0607=1 & op0101=0 & op0000=0 & CC_
{
	if (CC_ == 0) goto inst_next;
	sp = sp - 4;
	local tmp:4 = *[ram]:4 sp;
	return [tmp];
}

restore_r0: r0 is op0003=0 & r0 { r0 = *[ram]:4 sp; sp = sp + 4; }
restore_r1: r1 is op0003=1 & r1 { r1 = *[ram]:4 sp; sp = sp + 4; }
restore_r1:    is restore_r0  { build restore_r0; r1 = *[ram]:4 sp; sp = sp + 4; }
restore_r2: r2 is op0003=2 & r2 { r2 = *[ram]:4 sp; sp = sp + 4; }
restore_r2:    is restore_r1  { build restore_r1; r2 = *[ram]:4 sp; sp = sp + 4; }
restore_r3: r3 is op0003=3 & r3 { r3 = *[ram]:4 sp; sp = sp + 4; }
restore_r3:    is restore_r2  { build restore_r2; r3 = *[ram]:4 sp; sp = sp + 4; }
restore_r4: r4 is op0003=4 & r4 { r4 = *[ram]:4 sp; sp = sp + 4; }
restore_r4:    is restore_r3  { build restore_r3; r4 = *[ram]:4 sp; sp = sp + 4; }
restore_r5: r5 is op0003=5 & r5 { r5 = *[ram]:4 sp; sp = sp + 4; }
restore_r5:    is restore_r4  { build restore_r4; r5 = *[ram]:4 sp; sp = sp + 4; }
restore_r6: r6 is op0003=6 & r6 { r6 = *[ram]:4 sp; sp = sp + 4; }
restore_r6:    is restore_r5  { build restore_r5; r6 = *[ram]:4 sp; sp = sp + 4; }
restore_r7: r7 is op0003=7 & r7 { r7 = *[ram]:4 sp; sp = sp + 4; }
restore_r7:    is restore_r6  { build restore_r6; r7 = *[ram]:4 sp; sp = sp + 4; }
restore_r8: r8 is op0003=8 & r8 { r8 = *[ram]:4 sp; sp = sp + 4; }
restore_r8:    is restore_r7  { build restore_r7; r8 = *[ram]:4 sp; sp = sp + 4; }
restore:    fp is op0003=9 & fp { fp = *[ram]:4 sp; sp = sp + 4; }
restore:       is restore_r8  { fp = *[ram]:4 sp; sp = sp + 4; build restore_r8; }

:RESTORE %reg is op=0x18 ; (mode=4|mode=5) & reg & restore
{
	local tempa:4 = fp - 28;
	sp = tempa;
	build restore;
	sp = tempa;
}

:RET     is op=0x08
{
	local tempa = ap;
	local tempb = *[ram]:4 (sp - 4);
	local tempc = *[ram]:4 (sp - 8);
	ap = tempb;
	sp = tempa;
	goto [tempc];
}

define pcodeop gate_return;
:RETG  is op=0x30 ; op0007=0x45
{
	gate_return();
}

define pcodeop process_return;
:RETPS  is op=0x30 ; op0007=0xC8
{
	#TODO  this could have "exit" / no-return type logic built in
	#      somewhere
	process_return();
}

:ROTW count,src,dst   is op=0xd8 ; count ; src; dst
{
	local tmp:4 = (src << count) | (src >> (32 - count));
	dst = tmp;
	cond_case_1(dst);
}

# 0,1,2 are determinate, but SP and FP will not point beyond register-save area
save_r0: r0 is op0003=0 & r0 {                *[ram]:4 sp = r0; sp = sp + 4; }
save_r1: r1 is op0003=1 & r1 {                *[ram]:4 sp = r1; sp = sp + 4; }
save_r1:    is save_r0       { build save_r0; *[ram]:4 sp = r1; sp = sp + 4; }
save_r2: r2 is op0003=2 & r2 {                *[ram]:4 sp = r2; sp = sp + 4; }
save_r2:    is save_r1       { build save_r1; *[ram]:4 sp = r2; sp = sp + 4; }
save_r3: r3 is op0003=3 & r3 {                *[ram]:4 sp = r3; sp = sp + 4; }
save_r3:    is save_r2       { build save_r2; *[ram]:4 sp = r3; sp = sp + 4; }
save_r4: r4 is op0003=4 & r4 {                *[ram]:4 sp = r4; sp = sp + 4; }
save_r4:    is save_r3       { build save_r3; *[ram]:4 sp = r4; sp = sp + 4; }
save_r5: r5 is op0003=5 & r5 {                *[ram]:4 sp = r5; sp = sp + 4; }
save_r5:    is save_r4       { build save_r4; *[ram]:4 sp = r5; sp = sp + 4; }
save_r6: r6 is op0003=6 & r6 {                *[ram]:4 sp = r6; sp = sp + 4; }
save_r6:    is save_r5       { build save_r5; *[ram]:4 sp = r6; sp = sp + 4; }
save_r7: r7 is op0003=7 & r7 {                *[ram]:4 sp = r7; sp = sp + 4; }
save_r7:    is save_r6       { build save_r6; *[ram]:4 sp = r7; sp = sp + 4; }
save_r8: r8 is op0003=8 & r8 {                *[ram]:4 sp = r8; sp = sp + 4; }
save_r8:    is save_r7       { build save_r7; *[ram]:4 sp = r8; sp = sp + 4; }
save:    fp is op0003=9 & fp { *[ram]:4 sp = fp; sp = sp + 4;                }
save:       is save_r8       { *[ram]:4 sp = fp; sp = sp + 4; build save_r8; }

:SAVE %reg  is op=0x10 ; (mode=4|mode=5) & reg & save
{
	local temp:4 = sp;
	build save;
	sp = temp + 28;
	fp = sp;
}

#TODO  this could be improved, but not much gain
define pcodeop coproc_read;
define pcodeop coproc_write;
:SPOP op0031   is op=0x32 ; op0031
{
	local tmp:4 = op0031;
	psw = coproc_write(tmp);
}

:SPOPRS op0031,seamode is op=0x22 ; op0031 ; seamode
{
	local tmp:4 = op0031;
	local tmp2:1 = 1;
	coproc_write(tmp);
	psw = coproc_read(tmp2, seamode);
}

:SPOPRD op0031,seamode is op=0x02 ; op0031 ; seamode
{
	local tmp:4 = op0031;
	local tmp2:1 = 2;
	coproc_write(tmp);
	psw = coproc_read(tmp2, seamode);
}

:SPOPRT op0031,seamode is op=0x06 ; op0031 ; seamode
{
	local tmp:4 = op0031;
	local tmp2:1 = 3;
	coproc_write(tmp);
	psw = coproc_read(tmp2, seamode);
}

:SPOPS2 op0031,seamode,dst is op=0x23 ; op0031 ; seamode ; dst
{
	local tmp:4 = op0031;
	local tmp2:1 = 1;
	dst = coproc_write(tmp);
	psw = coproc_read(tmp2, seamode);
}

:SPOPD2 op0031,seamode,dst is op=0x03 ; op0031 ; seamode ; dst
{
	local tmp:4 = op0031;
	local tmp2:1 = 2;
	dst = coproc_write(tmp);
	psw = coproc_read(tmp2, seamode);
}

:SPOPT2 op0031,seamode,dst is op=0x07 ; op0031 ; seamode ; dst
{
	local tmp:4 = op0031;
	local tmp2:1 = 3;
	dst = coproc_write(tmp);
	psw = coproc_read(tmp2, seamode);
}

:SPOPWS op0031,deamode is op=0x33 ; op0031 ; deamode
{
	local tmp:4 = op0031;
	local tmp2:1 = 1;
	psw = coproc_write(tmp);
	coproc_write(tmp2, deamode);
}

:SPOPWD op0031,deamode is op=0x31 ; op0031 ; deamode
{
	local tmp:4 = op0031;
	local tmp2:1 = 2;
	psw = coproc_write(tmp);
	coproc_write(tmp2, deamode);
}

:SPOPWT op0031,deamode is op=0x17 ; op0031 ; deamode
{
	local tmp:4 = op0031;
	local tmp2:1 = 3;
	psw = coproc_write(tmp);
	coproc_write(tmp2, deamode);
}

:STRCPY  is op=0x30 ; op0007=0x35
{
    <start>
	local tmp:1 = *[ram]:1 r0;
	*[ram]:1 r1 = tmp;
	if (tmp == 0) goto inst_next;
	r1 = r1 + 1;
	r0 = r0 + 1;
	goto <start>;
}

:STREND  is op=0x30 ; op0007=0x1f
{
    <start>
	if ((*[ram]:1 r0) == 0) goto inst_next;
	r0 = r0 + 1;
	goto <start>;
}

:SUBB2 src,dst  is op=0xbf ; src ; dst
{
	local tmp:4 = zext(dst:1 - src:1);
	dst = tmp;
	cond_case_2(dst);
}

:SUBB3 src1,src2,dst  is op=0xff ; src1 ; src2 ; dst
{
	local tmp:4 = zext(src2:1 - src1:1);
	dst = tmp;
	cond_case_2(dst);
}

:SUBH2 src,dst  is op=0xbe ; src ; dst
{
	local tmp:4 = zext(dst:2 - src:2);
	dst = tmp;
	cond_case_2(dst);
}

:SUBH3 src1,src2,dst  is op=0xfe ; src1 ; src2 ; dst
{
	local tmp:4 = zext(src2:2 - src1:2);
	dst = tmp;
	cond_case_2(dst);
}

:SUBW2 src,dst  is op=0xbc ; src ; dst
{
	local tmp:4 = dst - src;
	dst = tmp;
	cond_case_2(dst);
}

:SUBW3 src1,src2,dst  is op=0xfc ; src1 ; src2 ; dst
{
	local tmp:4 = src2 - src1;
	dst = tmp;
	cond_case_2(dst);
}

#TODO  these look broken
:SWAPBI deamode  is op=0x1f ; deamode
{
	local tempa:4 = *[ram]:4 deamode;
	*[ram]:1 deamode = r0:1;
	cond_case_1(tempa);
	r0 = tempa;
}

:SWAPHI deamode is op=0x1e ; deamode
{
	local tempa:4 = *[ram]:4 deamode;
	*[ram]:2 deamode = r0:2;
	cond_case_1(tempa);
	r0 = tempa;
}

:SWAPWI deamode is op=0x1c ; deamode
{
	local tempa:4 = *[ram]:4 deamode;
	*[ram]:4 deamode = r0;
	cond_case_1(tempa);
	r0 = tempa;
}

:TSTB src   is op=0x2b ; src
{
	local tmp:4 = zext(src:1 - 0);
	cond_case_6(tmp);
}

:TSTH src   is op=0x2a ; src
{
	local tmp:4 = zext(src:2 - 0);
	cond_case_6(tmp);
}

:TSTW src   is op=0x28 ; src
{
	local tmp:4 = src - 0;
	cond_case_6(tmp);
}

define pcodeop wait;
:WAIT  is op=0x2F
{
	wait();
}

:XORB2 src,dst  is op=0xb7 ; src ; dst
{
	local tmp:4 = zext(dst:1 ^ src:1);
	dst = tmp;
	cond_case_1(dst);
}

:XORB3 src1,src2,dst  is op=0xf7 ; src1 ; src2 ; dst
{
	local tmp:4 = zext(src2:1 ^ src1:1);
	dst = tmp;
	cond_case_1(dst);
}

:XORH2 src,dst  is op=0xb6 ; src ; dst
{
	local tmp:4 = zext(dst:2 ^ src:2);
	dst = tmp;
	cond_case_1(dst);
}

:XORH3 src1,src2,dst  is op=0xf6 ; src1 ; src2 ; dst
{
	local tmp:4 = zext(src2:2 ^ src1:2);
	dst = tmp;
	cond_case_1(dst);
}

:XORW2 src,dst  is op=0xb4 ; src ; dst
{
	local tmp:4 = dst ^ src;
	dst = tmp;
	cond_case_1(dst);
}

:XORW3 src1,src2,dst  is op=0xf4 ; src1 ; src2 ; dst
{
	local tmp:4 = src2 ^ src1;
	dst = tmp;
	cond_case_1(dst);
}
